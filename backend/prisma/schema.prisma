generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String             @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  password              String
  email                 String             @unique
  dob                   DateTime?
  username              String?            @unique
  avatar                String?            @default("https://res.cloudinary.com/ddjznfpgh/image/upload/default-profile.jpg")
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  generatedImages       GeneratedImage[]
  posts                 Post[]
  comments              Comment[]
  replies               CommentReply[]
  likes                 Like[]
  following             Following[]        @relation("FollowingUser")
  followers             Follower[]         @relation("FollowerUser")
  token                 Token?             @relation("UserToken")
  sentNotifications     Notification[]     @relation("NotificationSender")
  receivedNotifications Notification[]     @relation("NotificationReceiver")
  PostLike              PostLike[]
  CommentLike           CommentLike[]
  CommentReplyLike      CommentReplyLike[]
  Following             Following[]
  Follower              Follower[]
}


model Token {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  accessToken  String
  refreshToken String?
  tokenExpiry  DateTime?
  user         User      @relation("UserToken", fields: [userId], references: [id])
  userId       String    @unique @db.ObjectId
}

model GeneratedImage {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  image          String
  prompt         String
  userId         String
  user           User    @relation(fields: [userId], references: [id])
  postId         String?
  post           Post?   @relation(fields: [postId], references: [id])
  isAdultContent Boolean @default(false)
}

model Post {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  caption          String
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  generatedImageId String
  generatedImages  GeneratedImage[]
  image            String
  createdAt        DateTime?        @default(now())
  updatedAt        DateTime         @updatedAt
  comments         Comment[]
  likes            PostLike[]
  Notification     Notification[]
}

model Following {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  user        User   @relation(fields: [userId], references: [id])
  followingId String @db.ObjectId
  following   User   @relation("FollowingUser", fields: [followingId], references: [id])

  @@unique([userId, followingId])
}

model Follower {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  user       User   @relation(fields: [userId], references: [id])
  followerId String @db.ObjectId
  follower   User   @relation("FollowerUser", fields: [followerId], references: [id])

  @@unique([userId, followerId])
}

model Comment {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  message   String?
  date      DateTime       @default(now())
  authorId  String
  author    User           @relation(fields: [authorId], references: [id])
  postId    String
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime?      @default(now())
  replies   CommentReply[]
  likes     CommentLike[]
}

model CommentReply {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  message         String
  date            DateTime           @default(now())
  authorId        String
  author          User               @relation(fields: [authorId], references: [id])
  parentCommentId String
  parentComment   Comment            @relation(fields: [parentCommentId], references: [id], onDelete: Cascade)
  createdAt       DateTime?          @default(now())
  likes           CommentReplyLike[]
}

model PostLike {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  postId    String
  post      Post      @relation(fields: [postId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
}

model CommentLike {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  commentId String
  comment   Comment   @relation(fields: [commentId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
}

model CommentReplyLike {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  commentReplyId String
  commentReply   CommentReply @relation(fields: [commentReplyId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  createdAt      DateTime?    @default(now())
}

model Like {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
}

model Notification {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  senderId         String           @db.ObjectId
  sender           User             @relation("NotificationSender", fields: [senderId], references: [id])
  receiverId       String           @db.ObjectId
  receiver         User             @relation("NotificationReceiver", fields: [receiverId], references: [id])
  notificationType NotificationType
  date             DateTime?
  notificationData Json
  postId           String?
  post             Post?            @relation(fields: [postId], references: [id])
  read             Boolean          @default(false)
}

enum NotificationType {
  follow
  like
  comment
  mention
  reply
}
